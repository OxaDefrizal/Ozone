openapi: 3.0.0
info:
  title: Ozone API
  version: 1.0.0
paths:
  /posts:
    get:
      summary: Get all posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /posts/{postId}:
    get:
      summary: Get a post by ID
      parameters:
        - name: postId
          in: path
          description: ID of the post to retrieve
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        '500':
          description: Internal server error
  
  /posts/by-tag/{tag}:
    get:
      summary: Get posts by tag
      parameters:
        - name: tag
          in: path
          description: Tag to filter posts by
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'

  /posts/by-popularity:
    get:
      summary: Get posts by popularity
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  /posts/by-community/{communityId}:
    get:
      summary: Get posts by community
      parameters:
        - name: communityId
          in: path
          description: ID of the community to filter posts by
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
  
  /posts/by-user/{userId}:
    get:
      summary: Get posts by user
      parameters:
        - name: userId
          in: path
          description: ID of the user to filter posts by
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
                  
  /posts/market:
    get:
      summary: Get posts with market
      parameters:
        - name: marketId
          in: query
          description: ID of the market to filter posts by
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '400':
          description: Invalid request
        '500':
          description: Internal server error
          
  /posts/{post_id}/comments:
    get:
      summary: Get Comments by Post ID
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
                
  /posts/create:
    post:
      summary: Create a new post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tag:
                  type: string
                  description: The tag for the post
                content:
                  type: string
                  description: The content of the post
                media:
                  type: string
                  description: The media associated with the post
                userId:
                  type: string
                  format: uuid
                  description: The ID of the user creating the post
                communityId:
                  type: string
                  format: uuid
                  description: The ID of the community the post belongs to
              required:
                - tag
                - content
                - userId
                - communityId
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid request payload
        '404':
          description: User or community not found
        '500':
          description: Internal server error
        
  /comments/create:
    post:
      summary: Create a Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '201':
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          description: Invalid request
        '404':
          description: Post not found
        '500':
          description: Internal server error
        
  /users/{user_id}:
    get:
      summary: Get User Details
      parameters:
        - in: path
          name: user_id
          schema:
            type: string
          required: true
          description: The ID of the user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          
  /users/update:
    put:
      summary: Update User Details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User details updated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error
          
  /communities:
    get:
      summary: Get Communities by Member Count
      parameters:
        - in: query
          name: minMembers
          schema:
            type: integer
          description: Minimum number of members required
        - in: query
          name: maxMembers
          schema:
            type: integer
          description: Maximum number of members allowed
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Community'
        '400':
          description: Invalid parameters
          
  /communities/{communityId}:
    get:
      summary: Get Community Details
      parameters:
        - in: path
          name: communityId
          required: true
          schema:
            type: string
          description: The ID of the community
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Community'
        '404':
          description: Community not found 
          
  /communities/create:
    post:
      summary: Create a new community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 32
                desc:
                  type: string
              required:
                - name
      responses:
        '200':
          description: Community created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  communityId:
                    type: string
                    format: uuid
                  name:
                    type: string
                  desc:
                    type: string
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
        '400':
          description: Bad request

  /signup:
    post:
      summary: User Signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
        '400':
          description: Invalid request
        '500':
          description: Internal server error
          
  /signin:
    post:
      summary: User Signin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User authenticated successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
          
  /password/update:
    put:
      summary: Change Password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        '200':
          description: Password changed successfully
        '400':
          description: Invalid request
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

components:
  schemas:
    Account:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
        username:
          type: string
          maxLength: 32
        email:
          type: string
          maxLength: 32
        password:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Comment:
      type: object
      properties:
        commentId:
          type: string
          format: uuid
        up:
          type: integer
        down:
          type: integer
        content:
          type: string
        media:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Community:
      type: object
      properties:
        communityId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 32
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Market:
      type: object
      properties:
        marketId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Member:
      type: object
      properties:
        memberId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Post:
      type: object
      properties:
        postId:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Social:
      type: object
      properties:
        socialId:
          type: string
          format: uuid
        platform:
          type: string
          enum: [Facebook, Twitter, Instagram]
        username:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 32
        bio:
          type: string
          maxLength: 32
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Vote:
      type: object
      properties:
        voteId:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        value:
          type: integer
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
